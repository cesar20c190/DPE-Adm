import streamlit as st
from datetime import date
from streamlit.runtime.scriptrunner import RerunException
import pandas as pd
import io


st.set_page_config(page_title="Termo de Declara√ß√£o", layout="centered")
st.title("üìÑ Termo de Declara√ß√£o")

# Dados principais
data_termo = st.date_input(
    "üìÖ Data do termo",
    value=date.today(),
    format="DD/MM/YYYY"
)

# Dicion√°rio com regionais e cidades
regionais_cidades = {
    "1¬™ REGIONAL": ["COIT√â", "FEIRA DE SANTANA", "IPIR√Å", "IRAR√Å", "RIACH√ÉO DO JACU√çPE", "SANTO ESTEV√ÉO", "SERRINHA"],
    "2¬™ REGIONAL": ["ITAPETINGA", "PO√á√ïES", "VIT√ìRIA DA CONQUISTA"],
    "3¬™ REGIONAL": ["CANAVIEIRAS", "ILH√âUS"],
    "4¬™ REGIONAL": ["CAMACAN", "ITABUNA"],
    "5¬™ REGIONAL": ["CAMPO FORMOSO", "JACOBIN", "JUAZEIRO", "SENHOR DO BOMFIN"],
    "6¬™ REGIONAL": ["AMARGOSA", "CACHOEIRA", "CRUZ DAS ALMAS", "NAZAR√â", "SANTO AMARO", "SANTO ANT√îNIO DE JESUS", "VALEN√áA"],
    "7¬™ REGIONAL": ["CAMA√áARI", "CANDEIAS", "ITAPARICA", "LAURO DE FREITAS", "SIM√ïES FILHO"],
    "8¬™ REGIONAL": ["BARREIRAS", "BOM JESUS DA LAPA", "LU√çS EDUARDO MAGALH√ÉES", "MACA√öBAS", "SANTA MARIA DA VIT√ìRIA"],
    "9¬™ REGIONAL": ["EUN√ÅPOLIS", "PORTO SEGURO"],
    "10¬™ REGIONAL": ["EUCLIDES DA CUNHA", "PAULO AFONSO", "PARIPIRANGA", "RIBEIRA DO POMBAL"],
    "11¬™ REGIONAL": ["IREC√ä", "ITABERABA", "SEABRA"],
    "12¬™ REGIONAL": ["IPIA√ö", "JEQUI√â"],
    "13¬™ REGIONAL": ["ALAGOINHAS", "CATU", "ESPLANADA"],
    "14¬™ REGIONAL": ["TEIXEIRA DE FREITAS"],
    "15¬™ REGIONAL": ["BRUMADO", "GUANAMBI"]
}
abas = st.tabs(["Dados iniciais", "Demanda", "Declara√ß√£o"])

with abas[0]:
    # Lista de regionais
    lista_regionais = list(regionais_cidades.keys())

    # Campo para selecionar a regional
    regional = st.selectbox("Selecione a Regional", lista_regionais)

    # Campo para selecionar a cidade associada
    cidade = st.selectbox("Selecione a Cidade", regionais_cidades[regional])

    # Exibir confirma√ß√£o
    st.success(f"üìù Termo para a cidade de **{cidade}** na **{regional}**, data: {data_termo.strftime('%d/%m/%Y')}")
    
    # 1. Identifica√ß√£o
    st.header("Identifica√ß√£o")
    Nome = st.text_input("Nome do assistido", placeholder="Ex: Jo√£o da Silva")
    cpf = st.text_input("CPF do assistido (apenas n√∫meros)", placeholder="Ex: 123.456.789-00")

    # 2. Dados do assistido
    st.header("Dados do assistido")
    col1, col2, col3 = st.columns([2, 1, 2])
    with col1:
        rua = st.text_input("Rua do assistido", placeholder="Ex: Rua das Flores")
    with col2:
        numero = st.text_input("N√∫mero", placeholder="Ex: 123")
    with col3:
        bairro = st.text_input("Bairro", placeholder="Ex: Centro")

    cidade_assistido = st.text_input("Cidade do assistido", placeholder="Ex: Salvador")
    telefone = st.text_input("Telefone do assistido", placeholder="Ex: (71) 99999-9999")
    datanascimento = st.date_input("Data de nascimento do assistido", format="DD/MM/YYYY")


    sexo = st.selectbox("Sexo do assistido", ["Masculino", "Feminino", "Homen trans", "Mulher trans", "N√£o bin√°rio", "Prefiro n√£o informar"])
    grupo_etinico = st.selectbox("Grupo √©tnico do assistido", ["Branco", "Preto", "Pardo", "Amarelo", "Ind√≠gena", "Prefiro n√£o informar"])  

    # 3. Dados da demanda
    st.header("Dados da demanda")
    renda_individual = st.selectbox("Renda individual do assistido", ["Nenhuma", "At√© 1 sal√°rio m√≠nimo", "De 1 a 2 sal√°rios m√≠nimos", "de 2 a 3 sal√°rios m√≠nimos", "de 3 a 4 sal√°rios m√≠nimos", "de 4 a 5 sal√°rios m√≠nimos", "mais de 5 sal√°rios m√≠nimos"])
    renda_familiar = st.selectbox("Renda familiar do assistido", ["Nenhuma", "At√© 1 sal√°rio m√≠nimo", "De 1 a 2 sal√°rios m√≠nimos", "de 2 a 3 sal√°rios m√≠nimos", "de 3 a 4 sal√°rios m√≠nimos", "de 4 a 5 sal√°rios m√≠nimos", "mais de 5 sal√°rios m√≠nimos"])
    materia = st.selectbox("Mat√©ria do termo", ["Sa√∫de", "Tribut√°rio", "Indenizat√≥ria", "Concuro P√∫blico", "Petit√≥rias/Possess√≥rias", "Alvar√°s", "Outros"])

with abas[1]:
    # Lista para armazenar m√∫ltiplas demandas
    if "demandas" not in st.session_state:
        st.session_state["demandas"] = []

    st.header("Demandas do assistido")

    #    Bot√£o para inserir nova demanda
    if st.button("Inserir demanda"):
        if "mostrar_nova_demanda" not in st.session_state:
            st.session_state["mostrar_nova_demanda"] = 1
        else:
            st.session_state["mostrar_nova_demanda"] += 1

    # Exibe campos para cada demanda a ser cadastrada
    num_demandas = st.session_state.get("mostrar_nova_demanda", 0)
    for i in range(num_demandas):
        with st.expander(f"Nova Demanda {i+1}", expanded=True):
            tipo = st.selectbox(
                f"Tipo de demanda {i+1}",
                [
                    "Cirurgia", "Exames", "Medicamentos", "Tratamento", "Insumos", "Consultas",
                    "Tratamento/Terapias continuadas", "Transfer√™ncia Hospitalar", "Interna√ß√£o em UTI",
                    "Transporte para fora do domic√≠lio-TFD", "Outros"
                ],
                key=f"tipo_demanda_{i}"
            )
            if tipo == "Outros":
                tipo = st.text_input(f"Especifique o tipo de demanda {i+1}", key=f"outros_tipo_{i}")
            descricao = st.text_area(
                f"Descri√ß√£o da demanda {i+1}",
                placeholder="Descreva a demanda de forma detalhada",
                height=100,
                key=f"descricao_demanda_{i}"
            )
                    
            # Exibe op√ß√µes adicionais se o tipo for "Medicamentos"
            if tipo == "Medicamentos":
                tipo_medicamento = st.selectbox(
                    "N√£o Fornecido pelo SUS ou Fornecido pelo SUS?",
                    ["N√£o fornecido pelo SUS", "Fornecido pelo SUS"],
                    key=f"tipo_medicamento_{i}"
                )
                tipo = f"Medicamentos - {tipo_medicamento}"

            # Salva automaticamente ao preencher ambos os campos
            if tipo and descricao:
                # Cada demanda √© salva como uma linha independente
                if len(st.session_state["demandas"]) < i + 1:
                    st.session_state["demandas"].append({
                        "tipo": tipo,
                        "descricao": descricao
                    })
                else:
                    st.session_state["demandas"][i] = {
                        "tipo": tipo,
                        "descricao": descricao
                    }

    # Exibe tabela das demandas cadastradas, uma por linha
    if st.session_state["demandas"]:
        st.subheader("Demandas cadastradas")
        df_demandas = pd.DataFrame(st.session_state["demandas"])
        st.dataframe(df_demandas, use_container_width=True)

with abas[2]:
    import sqlite3
    from docx import Document
    from datetime import datetime
    import os
    import io

    st.header("Declara√ß√£o")

    declaracao = st.text_area(
        "Declara√ß√£o",
        placeholder="Digite a declara√ß√£o aqui...",
        height=200,
        value=f"Assistido(a) declara que..."
    )

    # Estado da sess√£o para controlar exibi√ß√£o do bot√£o de gerar termo
    if "registro_salvo" not in st.session_state:
        st.session_state["registro_salvo"] = False

    # Bot√£o SALVAR REGISTRO no banco de dados
if st.button("üíæ Salvar Registro no Banco de Dados"):
    data_formatada = str(data_termo)

    conexao = sqlite3.connect("banco_termos.db")
    cursor = conexao.cursor()

    # Inserir o termo principal
    cursor.execute("""
        INSERT INTO termos (
            data_termo, regional, cidade_atendimento,
            nome, cpf, rua, numero, bairro, cidade_assistido, telefone,
            data_nascimento, sexo, grupo_etnico, renda_individual, renda_familiar,
            materia, declaracao
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    """, (
        data_formatada, regional, cidade,
        Nome, cpf, rua, numero, bairro, cidade_assistido, telefone,
        datanascimento.strftime("%Y-%m-%d"), sexo, grupo_etinico,
        renda_individual, renda_familiar, materia, declaracao
    ))

    id_termo = cursor.lastrowid  # Captura ID do termo salvo

    # Inserir cada demanda
    for demanda in st.session_state["demandas"]:
        cursor.execute("""
            INSERT INTO demandas (id_termo, tipo, descricao)
            VALUES (?, ?, ?)
        """, (id_termo, demanda["tipo"], demanda["descricao"]))

    conexao.commit()
    conexao.close()

    st.success("‚úÖ Registro completo salvo no banco de dados.")
    st.session_state["registro_salvo"] = True

    # Bot√£o de gerar documento s√≥ aparece ap√≥s salvar no banco
    if st.session_state["registro_salvo"]:
        st.markdown("---")
        st.subheader("üìÑ Gerar Documento")

        if st.button("üìÑ Gerar Termo de Declara√ß√£o"):
            caminho_modelo = "Documentos/termo_de_declaracao.docx"
            if not os.path.exists(caminho_modelo):
                st.error(f"‚ùå Arquivo de modelo n√£o encontrado: {caminho_modelo}")
            else:
                doc = Document(caminho_modelo)

                hora_atendimento = datetime.now().strftime("%H:%M")
                data_formatada = data_termo.strftime("%d/%m/%Y")
                qualificacao = f"{sexo}, CPF {cpf}, residente na {rua}, n¬∫ {numero}, bairro {bairro}, cidade de {cidade_assistido}, telefone {telefone}, nascido(a) em {datanascimento.strftime('%d/%m/%Y')}, do grupo √©tnico {grupo_etinico}"

                for p in doc.paragraphs:
                    p.text = p.text.replace("<<nomeassistido>>", Nome)
                    p.text = p.text.replace("<<horaatendimento>>", data_formatada + " √†s " + hora_atendimento)
                    p.text = p.text.replace("<<qualificacao>>", qualificacao)
                    p.text = p.text.replace("<<declaracao>>", declaracao)

                buffer = io.BytesIO()
                doc.save(buffer)
                buffer.seek(0)

                nome_arquivo = f"Termo_{Nome.replace(' ', '_')}_{datetime.now().strftime('%Y%m%d%H%M%S')}.docx"

                st.success("‚úÖ Documento gerado com sucesso.")
                st.download_button(
                    label="üì• Baixar Termo",
                    data=buffer,
                    file_name=nome_arquivo,
                    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                )

    # Bot√£o de gerar documento s√≥ aparece ap√≥s salvar no banco
    if st.session_state["registro_salvo"]:
        st.markdown("---")
        st.subheader("üìÑ Gerar Documento")

        if st.button("üìÑ Gerar Termo de Declara√ß√£o"):
            caminho_modelo = "Documentos/termo_de_declaracao.docx"
            if not os.path.exists(caminho_modelo):
                st.error(f"‚ùå Arquivo de modelo n√£o encontrado: {caminho_modelo}")
            else:
                doc = Document(caminho_modelo)

                hora_atendimento = datetime.now().strftime("%H:%M")
                data_formatada = data_termo.strftime("%d/%m/%Y")
                qualificacao = f"{sexo}, CPF {cpf}, residente na {rua}, n¬∫ {numero}, bairro {bairro}, cidade de {cidade_assistido}, telefone {telefone}, nascido(a) em {datanascimento.strftime('%d/%m/%Y')}, do grupo √©tnico {grupo_etinico}"

                for p in doc.paragraphs:
                    p.text = p.text.replace("<<nomeassistido>>", Nome)
                    p.text = p.text.replace("<<horaatendimento>>", data_formatada + " √†s " + hora_atendimento)
                    p.text = p.text.replace("<<qualificacao>>", qualificacao)
                    p.text = p.text.replace("<<declaracao>>", declaracao)

                buffer = io.BytesIO()
                doc.save(buffer)
                buffer.seek(0)

                nome_arquivo = f"Termo_{Nome.replace(' ', '_')}_{datetime.now().strftime('%Y%m%d%H%M%S')}.docx"

                st.success("‚úÖ Documento gerado com sucesso.")
                st.download_button(
                    label="üì• Baixar Termo",
                    data=buffer,
                    file_name=nome_arquivo,
                    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                )